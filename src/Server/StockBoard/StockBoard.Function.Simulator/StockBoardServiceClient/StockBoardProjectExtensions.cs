// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using System.Threading;
using System.Threading.Tasks;
using StockBoard.Function.Simulator.StockBoardServiceClient.Models;

namespace StockBoard.Function.Simulator.StockBoardServiceClient
{
    /// <summary>
    /// Extension methods for StockBoardProject.
    /// </summary>
    public static partial class StockBoardProjectExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            public static object GelAllBrokers(this IStockBoardProject operations, string version)
            {
                return operations.GelAllBrokersAsync(version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GelAllBrokersAsync(this IStockBoardProject operations, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GelAllBrokersWithHttpMessagesAsync(version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='brokerViewModel'>
            /// </param>
            public static void UpdateBroker(this IStockBoardProject operations, string version, BrokerViewModel brokerViewModel = default(BrokerViewModel))
            {
                operations.UpdateBrokerAsync(version, brokerViewModel).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='brokerViewModel'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateBrokerAsync(this IStockBoardProject operations, string version, BrokerViewModel brokerViewModel = default(BrokerViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateBrokerWithHttpMessagesAsync(version, brokerViewModel, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='brokerViewModel'>
            /// </param>
            public static void AddNewBroker(this IStockBoardProject operations, string version, BrokerViewModel brokerViewModel = default(BrokerViewModel))
            {
                operations.AddNewBrokerAsync(version, brokerViewModel).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='brokerViewModel'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddNewBrokerAsync(this IStockBoardProject operations, string version, BrokerViewModel brokerViewModel = default(BrokerViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddNewBrokerWithHttpMessagesAsync(version, brokerViewModel, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static BrokerViewModel GetBroker(this IStockBoardProject operations, System.Guid id, string version)
            {
                return operations.GetBrokerAsync(id, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BrokerViewModel> GetBrokerAsync(this IStockBoardProject operations, System.Guid id, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBrokerWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static void RemoveBroker(this IStockBoardProject operations, System.Guid id, string version)
            {
                operations.RemoveBrokerAsync(id, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveBrokerAsync(this IStockBoardProject operations, System.Guid id, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveBrokerWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            public static object GelAllOrders(this IStockBoardProject operations, string version)
            {
                return operations.GelAllOrdersAsync(version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GelAllOrdersAsync(this IStockBoardProject operations, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GelAllOrdersWithHttpMessagesAsync(version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='orderViewModel'>
            /// </param>
            public static void UpdateOrder(this IStockBoardProject operations, string version, OrderViewModel orderViewModel = default(OrderViewModel))
            {
                operations.UpdateOrderAsync(version, orderViewModel).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='orderViewModel'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateOrderAsync(this IStockBoardProject operations, string version, OrderViewModel orderViewModel = default(OrderViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateOrderWithHttpMessagesAsync(version, orderViewModel, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='orderViewModel'>
            /// </param>
            public static void AddNewOrder(this IStockBoardProject operations, string version, OrderViewModel orderViewModel = default(OrderViewModel))
            {
                operations.AddNewOrderAsync(version, orderViewModel).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='orderViewModel'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddNewOrderAsync(this IStockBoardProject operations, string version, OrderViewModel orderViewModel = default(OrderViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddNewOrderWithHttpMessagesAsync(version, orderViewModel, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static OrderViewModel GetOrder(this IStockBoardProject operations, System.Guid id, string version)
            {
                return operations.GetOrderAsync(id, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrderViewModel> GetOrderAsync(this IStockBoardProject operations, System.Guid id, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOrderWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static void RemoveOrder(this IStockBoardProject operations, System.Guid id, string version)
            {
                operations.RemoveOrderAsync(id, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveOrderAsync(this IStockBoardProject operations, System.Guid id, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveOrderWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            public static object GelAllPersons(this IStockBoardProject operations, string version)
            {
                return operations.GelAllPersonsAsync(version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GelAllPersonsAsync(this IStockBoardProject operations, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GelAllPersonsWithHttpMessagesAsync(version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='personViewModel'>
            /// </param>
            public static void UpdatePerson(this IStockBoardProject operations, string version, PersonViewModel personViewModel = default(PersonViewModel))
            {
                operations.UpdatePersonAsync(version, personViewModel).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='personViewModel'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdatePersonAsync(this IStockBoardProject operations, string version, PersonViewModel personViewModel = default(PersonViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdatePersonWithHttpMessagesAsync(version, personViewModel, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='personViewModel'>
            /// </param>
            public static void AddNewPerson(this IStockBoardProject operations, string version, PersonViewModel personViewModel = default(PersonViewModel))
            {
                operations.AddNewPersonAsync(version, personViewModel).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='personViewModel'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddNewPersonAsync(this IStockBoardProject operations, string version, PersonViewModel personViewModel = default(PersonViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddNewPersonWithHttpMessagesAsync(version, personViewModel, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static PersonViewModel GetPerson(this IStockBoardProject operations, System.Guid id, string version)
            {
                return operations.GetPersonAsync(id, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersonViewModel> GetPersonAsync(this IStockBoardProject operations, System.Guid id, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPersonWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static void RemovePerson(this IStockBoardProject operations, System.Guid id, string version)
            {
                operations.RemovePersonAsync(id, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemovePersonAsync(this IStockBoardProject operations, System.Guid id, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemovePersonWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            public static object GelAllStocks(this IStockBoardProject operations, string version)
            {
                return operations.GelAllStocksAsync(version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GelAllStocksAsync(this IStockBoardProject operations, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GelAllStocksWithHttpMessagesAsync(version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='stockViewModel'>
            /// </param>
            public static void UpdateStock(this IStockBoardProject operations, string version, StockViewModel stockViewModel = default(StockViewModel))
            {
                operations.UpdateStockAsync(version, stockViewModel).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='stockViewModel'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateStockAsync(this IStockBoardProject operations, string version, StockViewModel stockViewModel = default(StockViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateStockWithHttpMessagesAsync(version, stockViewModel, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='stockViewModel'>
            /// </param>
            public static void AddNewStock(this IStockBoardProject operations, string version, StockViewModel stockViewModel = default(StockViewModel))
            {
                operations.AddNewStockAsync(version, stockViewModel).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='stockViewModel'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddNewStockAsync(this IStockBoardProject operations, string version, StockViewModel stockViewModel = default(StockViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddNewStockWithHttpMessagesAsync(version, stockViewModel, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static StockViewModel GetStock(this IStockBoardProject operations, System.Guid id, string version)
            {
                return operations.GetStockAsync(id, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StockViewModel> GetStockAsync(this IStockBoardProject operations, System.Guid id, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStockWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static void RemoveStock(this IStockBoardProject operations, System.Guid id, string version)
            {
                operations.RemoveStockAsync(id, version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveStockAsync(this IStockBoardProject operations, System.Guid id, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveStockWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
